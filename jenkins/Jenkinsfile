

pipeline {
    agent {label 'agent'}
    environment {
    docker_image_name = "service"
    current_docker_image_name = "${docker_image_name}:${BUILD_NUMBER}"
    latest_image_name = "${docker_image_name}:latest"}
    stages {
        stage('Checkout version') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '${service_revision}']], extensions: [], userRemoteConfigs: [[credentialsId: '4d49bdc7-df49-4b1a-8ea4-9d6dd0dbf2be', url: 'git@github.com:AhmadG-coder/Payoneer-exercise.git']]])
                }
            }
        }
        stage('Build') {
                    steps {
                        script {
                            sh "docker build app/ -t ${env.current_docker_image_name}"
                        }
                    }
                }
        stage('Tag for deployment') {
                            steps {
                                script {
                                    sh "docker container prune --force --filter 'until=3h'"
                                    sh "docker image prune -a --force --filter 'until=3h'"
                                    def last_successful_build = Jenkins.instance.getItem(env.JOB_NAME).lastSuccessfulBuild
                                    if (last_successful_build){
                                            last_docker_image_num = last_successful_build.number
                                        }
                                        tag_exists = sh (script:"docker images -q ${latest_image_name}", returnStdout:true)
                                        if (tag_exists.trim()){
                                            sh "docker tag ${latest_image_name} service:${last_docker_image_num}"
                                        }
                                 

                                    sh "docker tag ${env.current_docker_image_name} ${latest_image_name}"
                                }
                            }
                        }
        stage('Deploy') {
                                    steps {
                                        script {
                                            sh "cd app/ && docker-compose up -d"
                                        }
                                    }
                                }
    }
}

