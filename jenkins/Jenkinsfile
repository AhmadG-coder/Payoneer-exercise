pipeline {
    agent {label 'agent'}
    environment {
    docker_image_name = "service"
    current_docker_image_name = "${docker_image_name}:${BUILD_NUMBER}"
    latest_image_name = "${docker_image_name}:latest"}
    stages {
        stage('Checkout version') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '${service_revision}']], extensions: [], userRemoteConfigs: [[credentialsId: 'repository', url: 'git@github.com:AhmadG-coder/Payoneer-exercise.git']]])
                }
            }
        }
        stage('Build') {
                    steps {
                        script {

                            sh "docker build app/ -t ${env.current_docker_image_name}"
                        }
                    }
                }
        stage('Tag for deployment') {
                            steps {
                                script {
                                    def last_docker_image_num = Jenkins.instance.getItem(env.JOB_NAME).lastSuccessfulBuild.number
                                    sh "docker container prune -a --force --filter 'until=3h'"
                                    sh "docker image prune -a --force --filter 'until=3h'"
                                    tag_exists = sh script:"docker images -q ${latest_image_name}", returnst
                                    sh "docker tag ${env.current_docker_image_name} ${latest_image_name}"
                                    sh "docker tag ${latest_image_name} service:${last_docker_image_num}"
                                    sh "docker tag ${env.current_docker_image_name} ${latest_image_name}"
                                }
                            }
                        }
        stage('Deploy') {
                                    steps {
                                        script {
                                            sh "cd app/ && docker-compose up -d"
                                        }
                                    }
                                }
    }
}


